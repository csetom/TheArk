/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianTiddlyWikiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path3 = __toESM(require("path"));

// services/TiddlyWikiToMarkdownService.ts
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
async function convertJSONToTiddlers(file) {
  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onload = () => {
      const tiddlers = JSON.parse(fileReader.result);
      resolve(tiddlers);
    };
    fileReader.onerror = () => {
      reject(fileReader.error);
    };
    fileReader.readAsText(file, "UTF-8");
  });
}
function convertTiddlersToObsidianMarkdown(tiddlers) {
  const markdownArray = [];
  for (const tiddler of tiddlers) {
    const frontMatter = `---
${tiddler.tags ? `tags: ${tiddler.tags}
` : ""}---
`;
    const content = frontMatter + convertTiddlyWikiToMarkdown(tiddler.text);
    markdownArray.push({
      content,
      title: tiddler.title
    });
  }
  return markdownArray;
}
async function writeObsidianMarkdownFiles(markdownArray, directoryPath) {
  fs.mkdirSync(directoryPath, { recursive: true });
  for (const markdownFile of markdownArray) {
    const fileName = `${markdownFile.title}.md`.replace(/[\/\:\\]/g, "");
    fs.writeFileSync(path.join(directoryPath, fileName), markdownFile.content, "utf-8");
  }
}
function convertTiddlyWikiToMarkdown(text) {
  let markdownText = text;
  markdownText = markdownText.replace(/<<<\n?([\s\S]+?)\n?<<<\n?([\s\S]*?)(?=\n?<<<|\n?$)/g, (match, p1, p2) => {
    const quote = p1.split("\n").map((line) => `> ${line}`).join("\n") + "\n";
    const remainingText = p2.trim() ? p2 : "";
    return `${quote}${remainingText}`;
  });
  const lines = markdownText.split("\n");
  const markdownLines = [];
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    let convertedLine = line.replace(/^(\s*)(\*+)(\s+)/g, (match, p1, p2, p3) => {
      const level = p1.replace(/\t/g, "    ").length / 4 + 1;
      return "  ".repeat(level - 1) + "-".repeat(p2.length) + p3;
    });
    convertedLine = convertedLine.replace(/^(\s*)(#+)(\s+)/g, (match, p1, p2, p3) => {
      return p2.replace(/#/g, "1.") + p3;
    });
    convertedLine = convertedLine.replace(/\[\[(.+?)]]/g, (_, match) => {
      const linkRegex = /([^\]|]+)(?:\|([^\]]+))?/;
      const linkMatch = linkRegex.exec(match);
      if (!linkMatch)
        return match;
      let linkElement1 = linkMatch[1];
      let linkElement2 = linkMatch[2];
      linkElement1 = linkElement1.replace(/[\/\:]/g, "_");
      if (linkElement2) {
        linkElement2 = linkElement2.replace(/[\/\:]/g, "_");
      }
      return "[[" + (linkElement2 ? linkElement2 + "|" + linkElement1 : linkElement1) + "]]";
    });
    convertedLine = convertedLine.replace(/''(.+?)''/g, "**$1**");
    convertedLine = convertedLine.replace(/\/\/(.+?)\/\//g, "_$1_");
    convertedLine = convertedLine.replace(/__(.+?)__/g, "<u>$1</u>");
    convertedLine = convertedLine.replace(/^(!{1,6})(\s+)(.+)/g, (match, p1, p2, p3) => {
      const level = p1.length;
      return "#".repeat(level) + p2 + p3;
    });
    convertedLine = convertedLine.replace(/\[img\[(.+?)\]\]/g, "![[$1]]");
    markdownLines.push(convertedLine);
  }
  return markdownLines.join("\n");
}

// services/MarkdownToTiddlyWikiService.ts
var fs2 = __toESM(require("fs"));
var path2 = __toESM(require("path"));
async function convertObsidianMarkdownToTiddlers(directoryPath) {
  const tiddlers = [];
  const files = fs2.readdirSync(directoryPath);
  for (const file of files) {
    if (file.startsWith(".")) {
      continue;
    }
    const filePath = path2.join(directoryPath, file);
    if (fs2.statSync(filePath).isDirectory()) {
      const subTiddlers = await convertObsidianMarkdownToTiddlers(filePath);
      tiddlers.push(...subTiddlers);
    } else if (path2.extname(filePath) === ".md") {
      const fileContent = fs2.readFileSync(filePath, "utf-8");
      const tiddler = convertObsidianMarkdownToTiddler(fileContent, file);
      tiddlers.push(tiddler);
    }
  }
  return tiddlers;
}
function convertObsidianMarkdownToTiddler(content, fileName) {
  const frontMatterRegex = /^---\n([\s\S]*?)---\n/;
  const frontMatterMatch = content.match(frontMatterRegex);
  let tags = [];
  if (frontMatterMatch) {
    const frontMatter = frontMatterMatch[1];
    const tagsMatch = frontMatter.match(/^tags:\s+(.+)$/m);
    if (tagsMatch) {
      tags.push(tagsMatch[1]);
    }
  }
  const title = fileName.replace(/.md$/, "");
  const { tags: tagsFromText, newText } = extractTagsFromMarkdownText(content);
  tags.push(...tagsFromText);
  const text = convertMarkdownToTiddlyWiki(newText);
  const created = new Date().toISOString();
  const modified = created;
  return { title, text, tags: tags.join(" "), created, modified };
}
function extractTagsFromMarkdownText(text) {
  const regex = /(^|\s)#([\w-]+)/g;
  const tags = [];
  const newText = text.replace(regex, (match, p1, p2) => {
    tags.push(p2);
    return p1;
  }).trim();
  return { tags: [...new Set(tags)], newText };
}
function convertMarkdownToTiddlyWiki(text) {
  let twText = text;
  twText = twText.replace(/^#+\s+(.*)$/gm, (match, p1) => {
    var _a, _b;
    const level = (_b = (_a = match.match(/^#+/)) == null ? void 0 : _a[0].length) != null ? _b : 0;
    return "!".repeat(level) + " " + p1;
  });
  twText = twText.split("\n").map((line) => {
    const match = line.match(/^( *)(-+)( +)(.*)$/);
    if (!match) {
      return line;
    }
    const level = match[1].replace(/\t/g, "    ").length / 2 + 1;
    return "	".repeat(level - 1) + "*".repeat(match[2].length) + match[3] + match[4];
  }).join("\n");
  twText = twText.split("\n").map((line) => {
    const match = line.match(/^( *)(\d+)\.( +)(.*)$/);
    if (!match) {
      return line;
    }
    const level = match[1].replace(/\t/g, "    ").length / 4 + 1;
    const prefix = "#".repeat(level);
    return prefix + match[3] + match[4];
  }).join("\n");
  twText = twText.replace(/\[\[([^\]]+)\]\]/g, (match, p1) => {
    const linkRegex = /((?:[^\[\]|\\]|\\.)+)(?:\|((?:[^\[\]|\\]|\\.)+))?/;
    const linkMatch = linkRegex.exec(p1);
    if (!linkMatch)
      return match;
    const linkElement1 = linkMatch[1];
    const linkElement2 = linkMatch[2] ? linkMatch[2] : "";
    return `[[${linkElement2 ? `${linkElement2}|` : ""}${linkElement1}]]`;
  });
  twText = twText.replace(/\*\*([^*]+)\*\*/g, "''$1''");
  twText = twText.replace(/(\b|[^\\])_(\S|\S.*?\S)_(\b|[^\\])/g, "$1//$2//$3");
  twText = twText.replace(/<u>([^<]+)<\/u>/g, "__$1__");
  twText = twText.replace(/!\[\[([^\]]+)\]\]/g, "[img[$1]]");
  twText = twText.split("\n").map((line, index, lines) => {
    const match = line.match(/^> (.*)/);
    if (!match) {
      return line;
    }
    if (index === 0 || lines[index - 1].match(/^\s*$/)) {
      line = `<<<
${match[1]}`;
    } else {
      line = match[1];
    }
    if (index === lines.length - 1 || lines[index + 1].match(/^\s*$/)) {
      line += "\n<<<";
    }
    return line;
  }).join("\n");
  return twText;
}
async function exportAllMarkdownFilesToJSON(directoryPath) {
  const tiddlers = await convertObsidianMarkdownToTiddlers(directoryPath);
  const tiddlerData = tiddlers.map((tiddler) => {
    return {
      title: tiddler.title,
      text: tiddler.text,
      tags: tiddler.tags,
      created: tiddler.created,
      modified: tiddler.modified
    };
  });
  return tiddlerData;
}

// utils/downloadJsonAsFile.ts
function downloadJsonAsFile(jsonObject, fileName) {
  const jsonString = JSON.stringify(jsonObject, null, 2);
  const blob = new Blob([jsonString], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = fileName;
  a.click();
  URL.revokeObjectURL(url);
}

// main.ts
var ObsidianTiddlyWikiPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Import" });
    const form = containerEl.createEl("form", { attr: { "encType": "multipart/form-data", "hidden": true } });
    const input = containerEl.createEl("input");
    input.type = "file";
    input.id = "file-upload";
    input.multiple = false;
    input.accept = ".json";
    input.addEventListener("change", async (event) => {
      if (input.files && input.files.length > 0) {
        for (let fileIndex = 0; fileIndex < input.files.length; fileIndex++) {
          const file = input.files.item(fileIndex);
          if (!file) {
            throw new Error("File is not defined");
          }
          const currentDate = new Date().toISOString().replace(/:/g, "_");
          const directoryPath = `TiddlyWiki-Import-${currentDate}`;
          const exportPath = path3.join(this.app.vault.adapter.basePath, directoryPath);
          const tiddlers = await convertJSONToTiddlers(file);
          const obsidianMarkdownArray = convertTiddlersToObsidianMarkdown(tiddlers);
          writeObsidianMarkdownFiles(obsidianMarkdownArray, exportPath);
          new import_obsidian.Notice(`\u2705 Successfuly imported TiddlyWiki to ${exportPath}`, 1e4);
        }
      }
    });
    form.appendChild(input);
    new import_obsidian.Setting(containerEl).setName("Import JSON").setDesc("To export from TiddlyWiki : Tools->Export all->JSON File").addButton((button) => button.setButtonText("Import .json").onClick(() => {
      input.click();
    }));
    containerEl.createEl("h2", { text: "Export" });
    new import_obsidian.Setting(containerEl).setName("Export JSON").setDesc("To import in TiddlyWiki : Tools->Import").addButton((button) => button.setButtonText("Export .json").onClick(async () => {
      const basePath = this.app.vault.adapter.basePath;
      const jsonExport = await exportAllMarkdownFilesToJSON(basePath);
      downloadJsonAsFile(jsonExport, "test.json");
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
